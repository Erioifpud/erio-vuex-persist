{"version":3,"file":"index.min.js","sources":["../../src/utils.js","../../src/index.js"],"sourcesContent":["/**\n * 使用持久化形式的 pathKeyState 覆盖 Vuex 的根状态对象 rootState 与合并，结果为 Vuex 的根状态对象的形式\n * 根状态对象 rootState 中不存在的属性不会被覆盖\n * @param {Object} rootState Vuex 根状态对象\n * @param {Object} pathKeyState 以属性路径作为键的对象，如 { 'a.b.c': 1, 'a.b.d': 2 }\n */\nexport const cover = (rootState, pathKeyState) => {\n  const copiedRootState = JSON.parse(JSON.stringify(rootState))\n  for (const path in pathKeyState) {\n    const value = pathKeyState[path]\n    setNestedItem(copiedRootState, path, value)\n  }\n  return copiedRootState\n}\n\n/**\n * 判断 obj 是否**不为对象**\n * @param {any} obj 任意形式的数据\n */\nexport const isNotObject = (obj) => obj === null || typeof obj !== 'object'\n\n/**\n * 通过属性路径 path 在上下文 ctx 中取得对应的值\n * @param {Object} ctx 需要通获取属性值的上下文\n * @param {String} path 属性在上下文 ctx 中的路径，形如 'a.b.c'\n */\nexport const getNestedItem = (ctx, path) => {\n  if (isNotObject(ctx)) {\n    return\n  }\n  if (typeof path !== 'string') {\n    return\n  }\n  const keys = path.split('.')\n  for (const key of keys) {\n    if (key in ctx) {\n      ctx = ctx[key]\n      continue\n    }\n    return\n  }\n  return {\n    value: ctx\n  }\n}\n\n/**\n * 在上下文 ctx 中通过路径 path 将对应属性赋值为 value\n * @param {Object} ctx 需要设置属性值的上下文\n * @param {String} path 属性在上下文中的路径，形如 'a.b.c'\n * @param {any} value 需要设置的属性的值\n */\nexport const setNestedItem = (ctx, path, value) => {\n  if (isNotObject(ctx)) {\n    return\n  }\n  const keys = path.split('.')\n  const last = keys.pop()\n  if (!last) {\n    return\n  }\n  for (const key of keys) {\n    if (isNotObject(ctx[key])) {\n      return\n    }\n    ctx = ctx[key]\n  }\n  ctx[last] = value\n}\n\n/**\n * [已弃用] 将持久化形式的 pathKeyState 转换为 Vuex 的根状态对象形式\n * @param {Object} pathKeyState 以属性路径作为键的对象，如 { 'a.b.c': 1, 'a.b.d': 2 }\n */\n// export const toState = (pathKeyState) => {\n//   if (isNotObject(pathKeyState)) {\n//     return\n//   }\n//   let state = {}\n//   for (let path in pathKeyState) {\n//     const value = pathKeyState[path]\n//     const keys = path.split('.')\n//     const last = keys.pop()\n//     let pointer = state\n//     for (const key of keys) {\n//       if (!pointer[key]) {\n//         pointer[key] = {}\n//       }\n//       pointer = pointer[key]\n//     }\n//     pointer[last] = value\n//   }\n//   return state\n// }\n","import { cover, getNestedItem } from './utils'\n\nexport default class ErioVuexPersist {\n  constructor (options) {\n    // 储存使用的容器\n    this.storage = options.storage || window.localStorage\n    // 状态储存规则\n    this.rule = options.rule\n    // 状态在容器中使用的键\n    this.storageKey = options.storageKey || 'erio-vuex-persist'\n    // 严格模式（能获得状态恢复完成的标志）\n    this.strict = options.strict\n    // 状态恢复函数\n    this.restoreState = options.restoreState ? options.restoreState : (key, storage) => {\n      const value = storage.getItem(key)\n      if (typeof value === 'string') {\n        return JSON.parse(value || {})\n      }\n      return value || {}\n    }\n    // 状态储存函数\n    this.saveState = options.saveState ? options.saveState : (key, state, storage) => {\n      storage.setItem(key, JSON.stringify(state))\n    }\n\n    // Vuex 使用的插件\n    this.plugin = (store) => {\n      // 从 storage 中取出数据恢复至 Vuex\n      const prevState = this.restoreState(this.storageKey, this.storage)\n      if (this.strict) {\n        store.commit('RESTORE_MUTATION', prevState)\n      } else {\n        store.replaceState(cover(store.state, prevState))\n      }\n      let miniStore = prevState || {}\n\n      // 根据 rule 在每一次 mutation 后将需要的状态同步至 storage\n      store.subscribe((mutation, state) => {\n        const { type } = mutation\n        if (!(type in this.rule)) {\n          return\n        }\n        const paths = this.rule[type]\n        const tempStore = paths.reduce((a, b) => {\n          const item = getNestedItem(state, b)\n          if (item) {\n            a[b] = item.value\n          }\n          return a\n        }, {})\n\n        miniStore = {\n          ...miniStore,\n          ...tempStore\n        }\n        this.saveState(this.storageKey, miniStore, this.storage)\n      })\n    }\n\n    /**\n     * from: https://github.com/championswimmer/vuex-persist/blob/master/src/index.ts\n     * 通过 Mutation 的形式恢复状态\n     * @param {Object} state Vuex 根状态对象\n     * @param {Object} savedState 要恢复的局部状态\n     */\n    this.RESTORE_MUTATION = (state, savedState) => {\n      const coverdState = cover(state, savedState || {})\n      for (const propertyName of Object.keys(coverdState)) {\n        this._vm.$set(state, propertyName, coverdState[propertyName])\n      }\n    }\n  }\n}\n"],"names":["cover","rootState","pathKeyState","copiedRootState","JSON","parse","stringify","path","value","setNestedItem","isNotObject","obj","_typeof","ctx","keys","split","last","pop","key","options","storage","window","localStorage","rule","storageKey","strict","restoreState","getItem","saveState","state","setItem","plugin","store","prevState","_this","commit","replaceState","miniStore","subscribe","mutation","type","tempStore","reduce","a","b","item","RESTORE_MUTATION","savedState","coverdState","Object","propertyName","_vm","$set"],"mappings":"6oBAMqB,SAARA,EAASC,EAAWC,OACzBC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUL,QAC7C,IAAMM,KAAQL,EAAc,KACzBM,EAAQN,EAAaK,GAC3BE,EAAcN,EAAiBI,EAAMC,UAEhCL,EAOkB,SAAdO,EAAeC,UAAgB,OAARA,GAA+B,WAAfC,EAAOD,GAiC9B,SAAhBF,EAAiBI,EAAKN,EAAMC,OACnCE,EAAYG,QAGVC,EAAOP,EAAKQ,MAAM,KAClBC,EAAOF,EAAKG,SACbD,0CAGaF,iDAAM,KAAbI,aACLR,EAAYG,EAAIK,WAGpBL,EAAMA,EAAIK,sFAEZL,EAAIG,GAAQR,cChEZ,WAAaW,qHAENC,QAAUD,EAAQC,SAAWC,OAAOC,kBAEpCC,KAAOJ,EAAQI,UAEfC,WAAaL,EAAQK,YAAc,yBAEnCC,OAASN,EAAQM,YAEjBC,aAAeP,EAAQO,aAAeP,EAAQO,aAAe,SAACR,EAAKE,OAChEZ,EAAQY,EAAQO,QAAQT,SACT,iBAAVV,EACFJ,KAAKC,MAAMG,GAAS,IAEtBA,GAAS,SAGboB,UAAYT,EAAQS,UAAYT,EAAQS,UAAY,SAACV,EAAKW,EAAOT,GACpEA,EAAQU,QAAQZ,EAAKd,KAAKE,UAAUuB,UAIjCE,OAAS,SAACC,OAEPC,EAAYC,EAAKR,aAAaQ,EAAKV,WAAYU,EAAKd,SACtDc,EAAKT,OACPO,EAAMG,OAAO,mBAAoBF,GAEjCD,EAAMI,aAAapC,EAAMgC,EAAMH,MAAOI,QAEpCI,EAAYJ,GAAa,GAG7BD,EAAMM,UAAU,SAACC,EAAUV,OACjBW,EAASD,EAATC,QACFA,KAAQN,EAAKX,UAIbkB,EADQP,EAAKX,KAAKiB,GACAE,OAAO,SAACC,EAAGC,OAC3BC,EDlBa,SAAChC,EAAKN,OAC7BG,EAAYG,IAGI,iBAATN,OAGLO,EAAOP,EAAKQ,MAAM,wCACND,iDAAM,KAAbI,eACLA,KAAOL,UACTA,EAAMA,EAAIK,4FAKP,CACLV,MAAOK,IAhBkB,CCkBQgB,EAAOe,UAC9BC,IACFF,EAAEC,GAAKC,EAAKrC,OAEPmC,GACN,IAEHN,ybACKA,KACAI,GAELP,EAAKN,UAAUM,EAAKV,WAAYa,EAAWH,EAAKd,kBAU/C0B,iBAAmB,SAACjB,EAAOkB,WACxBC,EAAchD,EAAM6B,EAAOkB,GAAc,UACpBE,OAAOnC,KAAKkC,kBAAc,KAA1CE,OACThB,EAAKiB,IAAIC,KAAKvB,EAAOqB,EAAcF,EAAYE"}